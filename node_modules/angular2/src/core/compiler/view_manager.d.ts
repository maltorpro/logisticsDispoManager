import { Injector, ResolvedBinding } from 'angular2/di';
import * as viewModule from './view';
import { ElementRef } from './element_ref';
import { ProtoViewRef, ViewRef } from './view_ref';
import { ViewContainerRef } from './view_container_ref';
import { Renderer } from 'angular2/src/render/api';
import { AppViewManagerUtils } from './view_manager_utils';
import { AppViewPool } from './view_pool';
import { AppViewListener } from './view_listener';
/**
 * Entry point for creating, moving views in the view hierarchy and destroying views.
 * This manager contains all recursion and delegates to helper methods
 * in AppViewManagerUtils and the Renderer, so unit tests get simpler.
 */
export declare class AppViewManager {
    private _viewPool;
    private _viewListener;
    private _utils;
    private _renderer;
    /**
     * @private
     */
    constructor(_viewPool: AppViewPool, _viewListener: AppViewListener, _utils: AppViewManagerUtils, _renderer: Renderer);
    /**
     * Returns associated Component {@link ViewRef} from {@link ElementRef}.
     *
     * If an {@link ElementRef} is from an element which has a component, this method returns
     * the component's {@link ViewRef}.
     */
    getComponentView(hostLocation: ElementRef): ViewRef;
    /**
     * Returns a {@link ViewContainerRef} at the {@link ElementRef} location.
     */
    getViewContainer(location: ElementRef): ViewContainerRef;
    /**
     * Return the first child element of the host element view.
     */
    getHostElement(hostViewRef: ViewRef): ElementRef;
    /**
     * Returns an ElementRef for the element with the given variable name
     * in the current view.
     *
     * - `hostLocation`: {@link ElementRef} of any element in the View which defines the scope of
     *   search.
     * - `variableName`: Name of the variable to locate.
     * - Returns {@link ElementRef} of the found element or null. (Throws if not found.)
     */
    getNamedElementInComponentView(hostLocation: ElementRef, variableName: string): ElementRef;
    /**
     * Returns the component instance for a given element.
     *
     * The component is the execution context as seen by an expression at that {@link ElementRef}
     * location.
     */
    getComponent(hostLocation: ElementRef): any;
    /**
     * Load component view into existing element.
     *
     * Use this if a host element is already in the DOM and it is necessary to upgrade
     * the element into Angular component by attaching a view but reusing the existing element.
     *
     * - `hostProtoViewRef`: {@link ProtoViewRef} Proto view to use in creating a view for this
     *   component.
     * - `overrideSelector`: (optional) selector to use in locating the existing element to load
     *   the view into. If not specified use the selector in the component definition of the
     *   `hostProtoView`.
     * - injector: {@link Injector} to use as parent injector for the view.
     *
     * See {@link AppViewManager#destroyRootHostView}.
     *
     * ## Example
     *
     * ```
     * @ng.Component({
     *   selector: 'child-component'
     * })
     * @ng.View({
     *   template: 'Child'
     * })
     * class ChildComponent {
     *
     * }
     *
     * @ng.Component({
     *   selector: 'my-app'
     * })
     * @ng.View({
     *   template: `
     *     Parent (<some-component></some-component>)
     *   `
     * })
     * class MyApp {
     *   viewRef: ng.ViewRef;
     *
     *   constructor(public appViewManager: ng.AppViewManager, compiler: ng.Compiler) {
     *     compiler.compileInHost(ChildComponent).then((protoView: ng.ProtoViewRef) => {
     *       this.viewRef = appViewManager.createRootHostView(protoView, 'some-component', null);
     *     })
     *   }
     *
     *   onDestroy() {
     *     this.appViewManager.destroyRootHostView(this.viewRef);
     *     this.viewRef = null;
     *   }
     * }
     *
     * ng.bootstrap(MyApp);
     * ```
     */
    createRootHostView(hostProtoViewRef: ProtoViewRef, overrideSelector: string, injector: Injector): ViewRef;
    /**
     * Remove the View created with {@link AppViewManager#createRootHostView}.
     */
    destroyRootHostView(hostViewRef: ViewRef): void;
    /**
     *
     * See {@link AppViewManager#destroyViewInContainer}.
     */
    createViewInContainer(viewContainerLocation: ElementRef, atIndex: number, protoViewRef: ProtoViewRef, context?: ElementRef, bindings?: ResolvedBinding[]): ViewRef;
    /**
     *
     * See {@link AppViewManager#createViewInContainer}.
     */
    destroyViewInContainer(viewContainerLocation: ElementRef, atIndex: number): void;
    /**
     *
     * See {@link AppViewManager#detachViewInContainer}.
     */
    attachViewInContainer(viewContainerLocation: ElementRef, atIndex: number, viewRef: ViewRef): ViewRef;
    /**
     *
     * See {@link AppViewManager#attachViewInContainer}.
     */
    detachViewInContainer(viewContainerLocation: ElementRef, atIndex: number): ViewRef;
    _createPooledView(protoView: viewModule.AppProtoView): viewModule.AppView;
    _createViewRecurse(view: viewModule.AppView): void;
    _destroyPooledView(view: viewModule.AppView): void;
    _destroyViewInContainer(parentView: any, boundElementIndex: any, atIndex: number): void;
    _destroyComponentView(hostView: any, boundElementIndex: any, componentView: any): void;
    _viewHydrateRecurse(view: viewModule.AppView): void;
    _viewDehydrateRecurse(view: viewModule.AppView, forceDestroyComponents: any): void;
}
export declare var __esModule: boolean;
